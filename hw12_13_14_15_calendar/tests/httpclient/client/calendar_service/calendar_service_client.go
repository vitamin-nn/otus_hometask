// Code generated by go-swagger; DO NOT EDIT.

package calendar_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new calendar service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for calendar service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CalendarServiceCreateEvent(params *CalendarServiceCreateEventParams, authInfo runtime.ClientAuthInfoWriter) (*CalendarServiceCreateEventOK, error)

	CalendarServiceDeleteEvent(params *CalendarServiceDeleteEventParams, authInfo runtime.ClientAuthInfoWriter) (*CalendarServiceDeleteEventOK, error)

	CalendarServiceGetEventsDay(params *CalendarServiceGetEventsDayParams, authInfo runtime.ClientAuthInfoWriter) (*CalendarServiceGetEventsDayOK, error)

	CalendarServiceGetEventsMonth(params *CalendarServiceGetEventsMonthParams, authInfo runtime.ClientAuthInfoWriter) (*CalendarServiceGetEventsMonthOK, error)

	CalendarServiceGetEventsWeek(params *CalendarServiceGetEventsWeekParams, authInfo runtime.ClientAuthInfoWriter) (*CalendarServiceGetEventsWeekOK, error)

	CalendarServiceUpdateEvent(params *CalendarServiceUpdateEventParams, authInfo runtime.ClientAuthInfoWriter) (*CalendarServiceUpdateEventOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CalendarServiceCreateEvent calendar service create event API
*/
func (a *Client) CalendarServiceCreateEvent(params *CalendarServiceCreateEventParams, authInfo runtime.ClientAuthInfoWriter) (*CalendarServiceCreateEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCalendarServiceCreateEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CalendarService_CreateEvent",
		Method:             "POST",
		PathPattern:        "/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CalendarServiceCreateEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CalendarServiceCreateEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CalendarServiceCreateEventDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CalendarServiceDeleteEvent calendar service delete event API
*/
func (a *Client) CalendarServiceDeleteEvent(params *CalendarServiceDeleteEventParams, authInfo runtime.ClientAuthInfoWriter) (*CalendarServiceDeleteEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCalendarServiceDeleteEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CalendarService_DeleteEvent",
		Method:             "DELETE",
		PathPattern:        "/delete/{event_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CalendarServiceDeleteEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CalendarServiceDeleteEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CalendarServiceDeleteEventDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CalendarServiceGetEventsDay calendar service get events day API
*/
func (a *Client) CalendarServiceGetEventsDay(params *CalendarServiceGetEventsDayParams, authInfo runtime.ClientAuthInfoWriter) (*CalendarServiceGetEventsDayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCalendarServiceGetEventsDayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CalendarService_GetEventsDay",
		Method:             "POST",
		PathPattern:        "/get_events_day",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CalendarServiceGetEventsDayReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CalendarServiceGetEventsDayOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CalendarServiceGetEventsDayDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CalendarServiceGetEventsMonth calendar service get events month API
*/
func (a *Client) CalendarServiceGetEventsMonth(params *CalendarServiceGetEventsMonthParams, authInfo runtime.ClientAuthInfoWriter) (*CalendarServiceGetEventsMonthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCalendarServiceGetEventsMonthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CalendarService_GetEventsMonth",
		Method:             "POST",
		PathPattern:        "/get_events_month",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CalendarServiceGetEventsMonthReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CalendarServiceGetEventsMonthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CalendarServiceGetEventsMonthDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CalendarServiceGetEventsWeek calendar service get events week API
*/
func (a *Client) CalendarServiceGetEventsWeek(params *CalendarServiceGetEventsWeekParams, authInfo runtime.ClientAuthInfoWriter) (*CalendarServiceGetEventsWeekOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCalendarServiceGetEventsWeekParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CalendarService_GetEventsWeek",
		Method:             "POST",
		PathPattern:        "/get_events_week",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CalendarServiceGetEventsWeekReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CalendarServiceGetEventsWeekOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CalendarServiceGetEventsWeekDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CalendarServiceUpdateEvent calendar service update event API
*/
func (a *Client) CalendarServiceUpdateEvent(params *CalendarServiceUpdateEventParams, authInfo runtime.ClientAuthInfoWriter) (*CalendarServiceUpdateEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCalendarServiceUpdateEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CalendarService_UpdateEvent",
		Method:             "PUT",
		PathPattern:        "/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CalendarServiceUpdateEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CalendarServiceUpdateEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CalendarServiceUpdateEventDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
